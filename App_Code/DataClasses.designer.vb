'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.1
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="HOSPITALDatabase")>  _
Partial Public Class DataClassesDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertAppointmentTable(instance As AppointmentTable)
    End Sub
  Partial Private Sub UpdateAppointmentTable(instance As AppointmentTable)
    End Sub
  Partial Private Sub DeleteAppointmentTable(instance As AppointmentTable)
    End Sub
  Partial Private Sub InsertBloodBank(instance As BloodBank)
    End Sub
  Partial Private Sub UpdateBloodBank(instance As BloodBank)
    End Sub
  Partial Private Sub DeleteBloodBank(instance As BloodBank)
    End Sub
  Partial Private Sub InsertBloodRequirement(instance As BloodRequirement)
    End Sub
  Partial Private Sub UpdateBloodRequirement(instance As BloodRequirement)
    End Sub
  Partial Private Sub DeleteBloodRequirement(instance As BloodRequirement)
    End Sub
  Partial Private Sub InsertCareerTable(instance As CareerTable)
    End Sub
  Partial Private Sub UpdateCareerTable(instance As CareerTable)
    End Sub
  Partial Private Sub DeleteCareerTable(instance As CareerTable)
    End Sub
  Partial Private Sub InsertCityState(instance As CityState)
    End Sub
  Partial Private Sub UpdateCityState(instance As CityState)
    End Sub
  Partial Private Sub DeleteCityState(instance As CityState)
    End Sub
  Partial Private Sub InsertDepartmentTable(instance As DepartmentTable)
    End Sub
  Partial Private Sub UpdateDepartmentTable(instance As DepartmentTable)
    End Sub
  Partial Private Sub DeleteDepartmentTable(instance As DepartmentTable)
    End Sub
  Partial Private Sub InsertDoctorTable(instance As DoctorTable)
    End Sub
  Partial Private Sub UpdateDoctorTable(instance As DoctorTable)
    End Sub
  Partial Private Sub DeleteDoctorTable(instance As DoctorTable)
    End Sub
  Partial Private Sub InsertEnquiryTable(instance As EnquiryTable)
    End Sub
  Partial Private Sub UpdateEnquiryTable(instance As EnquiryTable)
    End Sub
  Partial Private Sub DeleteEnquiryTable(instance As EnquiryTable)
    End Sub
  Partial Private Sub InsertFeedbackTable(instance As FeedbackTable)
    End Sub
  Partial Private Sub UpdateFeedbackTable(instance As FeedbackTable)
    End Sub
  Partial Private Sub DeleteFeedbackTable(instance As FeedbackTable)
    End Sub
  Partial Private Sub InsertPackageTable(instance As PackageTable)
    End Sub
  Partial Private Sub UpdatePackageTable(instance As PackageTable)
    End Sub
  Partial Private Sub DeletePackageTable(instance As PackageTable)
    End Sub
  Partial Private Sub InsertRegisterPackage(instance As RegisterPackage)
    End Sub
  Partial Private Sub UpdateRegisterPackage(instance As RegisterPackage)
    End Sub
  Partial Private Sub DeleteRegisterPackage(instance As RegisterPackage)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("HOSPITALDatabaseConnectionString1").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property AppointmentTables() As System.Data.Linq.Table(Of AppointmentTable)
		Get
			Return Me.GetTable(Of AppointmentTable)
		End Get
	End Property
	
	Public ReadOnly Property BloodBanks() As System.Data.Linq.Table(Of BloodBank)
		Get
			Return Me.GetTable(Of BloodBank)
		End Get
	End Property
	
	Public ReadOnly Property BloodRequirements() As System.Data.Linq.Table(Of BloodRequirement)
		Get
			Return Me.GetTable(Of BloodRequirement)
		End Get
	End Property
	
	Public ReadOnly Property CareerTables() As System.Data.Linq.Table(Of CareerTable)
		Get
			Return Me.GetTable(Of CareerTable)
		End Get
	End Property
	
	Public ReadOnly Property CityStates() As System.Data.Linq.Table(Of CityState)
		Get
			Return Me.GetTable(Of CityState)
		End Get
	End Property
	
	Public ReadOnly Property DepartmentTables() As System.Data.Linq.Table(Of DepartmentTable)
		Get
			Return Me.GetTable(Of DepartmentTable)
		End Get
	End Property
	
	Public ReadOnly Property DoctorTables() As System.Data.Linq.Table(Of DoctorTable)
		Get
			Return Me.GetTable(Of DoctorTable)
		End Get
	End Property
	
	Public ReadOnly Property EnquiryTables() As System.Data.Linq.Table(Of EnquiryTable)
		Get
			Return Me.GetTable(Of EnquiryTable)
		End Get
	End Property
	
	Public ReadOnly Property FeedbackTables() As System.Data.Linq.Table(Of FeedbackTable)
		Get
			Return Me.GetTable(Of FeedbackTable)
		End Get
	End Property
	
	Public ReadOnly Property PackageTables() As System.Data.Linq.Table(Of PackageTable)
		Get
			Return Me.GetTable(Of PackageTable)
		End Get
	End Property
	
	Public ReadOnly Property RegisterPackages() As System.Data.Linq.Table(Of RegisterPackage)
		Get
			Return Me.GetTable(Of RegisterPackage)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AppointmentTable")>  _
Partial Public Class AppointmentTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DoctorID As Integer
	
	Private _AppointmentID As String
	
	Private _DoctorName As String
	
	Private _PatientName As String
	
	Private _Age As String
	
	Private _VisitingDate As String
	
	Private _EmailID As String
	
	Private _Mobile As String
	
	Private _CurrentDate As System.Nullable(Of Date)
	
	Private _IdProof As String
	
	Private _Gender As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDoctorIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDoctorIDChanged()
    End Sub
    Partial Private Sub OnAppointmentIDChanging(value As String)
    End Sub
    Partial Private Sub OnAppointmentIDChanged()
    End Sub
    Partial Private Sub OnDoctorNameChanging(value As String)
    End Sub
    Partial Private Sub OnDoctorNameChanged()
    End Sub
    Partial Private Sub OnPatientNameChanging(value As String)
    End Sub
    Partial Private Sub OnPatientNameChanged()
    End Sub
    Partial Private Sub OnAgeChanging(value As String)
    End Sub
    Partial Private Sub OnAgeChanged()
    End Sub
    Partial Private Sub OnVisitingDateChanging(value As String)
    End Sub
    Partial Private Sub OnVisitingDateChanged()
    End Sub
    Partial Private Sub OnEmailIDChanging(value As String)
    End Sub
    Partial Private Sub OnEmailIDChanged()
    End Sub
    Partial Private Sub OnMobileChanging(value As String)
    End Sub
    Partial Private Sub OnMobileChanged()
    End Sub
    Partial Private Sub OnCurrentDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCurrentDateChanged()
    End Sub
    Partial Private Sub OnIdProofChanging(value As String)
    End Sub
    Partial Private Sub OnIdProofChanged()
    End Sub
    Partial Private Sub OnGenderChanging(value As String)
    End Sub
    Partial Private Sub OnGenderChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DoctorID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property DoctorID() As Integer
		Get
			Return Me._DoctorID
		End Get
		Set
			If ((Me._DoctorID = value)  _
						= false) Then
				Me.OnDoctorIDChanging(value)
				Me.SendPropertyChanging
				Me._DoctorID = value
				Me.SendPropertyChanged("DoctorID")
				Me.OnDoctorIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AppointmentID", DbType:="VarChar(50)")>  _
	Public Property AppointmentID() As String
		Get
			Return Me._AppointmentID
		End Get
		Set
			If (String.Equals(Me._AppointmentID, value) = false) Then
				Me.OnAppointmentIDChanging(value)
				Me.SendPropertyChanging
				Me._AppointmentID = value
				Me.SendPropertyChanged("AppointmentID")
				Me.OnAppointmentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DoctorName", DbType:="VarChar(50)")>  _
	Public Property DoctorName() As String
		Get
			Return Me._DoctorName
		End Get
		Set
			If (String.Equals(Me._DoctorName, value) = false) Then
				Me.OnDoctorNameChanging(value)
				Me.SendPropertyChanging
				Me._DoctorName = value
				Me.SendPropertyChanged("DoctorName")
				Me.OnDoctorNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PatientName", DbType:="VarChar(50)")>  _
	Public Property PatientName() As String
		Get
			Return Me._PatientName
		End Get
		Set
			If (String.Equals(Me._PatientName, value) = false) Then
				Me.OnPatientNameChanging(value)
				Me.SendPropertyChanging
				Me._PatientName = value
				Me.SendPropertyChanged("PatientName")
				Me.OnPatientNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Age", DbType:="VarChar(50)")>  _
	Public Property Age() As String
		Get
			Return Me._Age
		End Get
		Set
			If (String.Equals(Me._Age, value) = false) Then
				Me.OnAgeChanging(value)
				Me.SendPropertyChanging
				Me._Age = value
				Me.SendPropertyChanged("Age")
				Me.OnAgeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VisitingDate", DbType:="VarChar(50)")>  _
	Public Property VisitingDate() As String
		Get
			Return Me._VisitingDate
		End Get
		Set
			If (String.Equals(Me._VisitingDate, value) = false) Then
				Me.OnVisitingDateChanging(value)
				Me.SendPropertyChanging
				Me._VisitingDate = value
				Me.SendPropertyChanged("VisitingDate")
				Me.OnVisitingDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailID", DbType:="VarChar(50)")>  _
	Public Property EmailID() As String
		Get
			Return Me._EmailID
		End Get
		Set
			If (String.Equals(Me._EmailID, value) = false) Then
				Me.OnEmailIDChanging(value)
				Me.SendPropertyChanging
				Me._EmailID = value
				Me.SendPropertyChanged("EmailID")
				Me.OnEmailIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mobile", DbType:="VarChar(50)")>  _
	Public Property Mobile() As String
		Get
			Return Me._Mobile
		End Get
		Set
			If (String.Equals(Me._Mobile, value) = false) Then
				Me.OnMobileChanging(value)
				Me.SendPropertyChanging
				Me._Mobile = value
				Me.SendPropertyChanged("Mobile")
				Me.OnMobileChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurrentDate", DbType:="DateTime")>  _
	Public Property CurrentDate() As System.Nullable(Of Date)
		Get
			Return Me._CurrentDate
		End Get
		Set
			If (Me._CurrentDate.Equals(value) = false) Then
				Me.OnCurrentDateChanging(value)
				Me.SendPropertyChanging
				Me._CurrentDate = value
				Me.SendPropertyChanged("CurrentDate")
				Me.OnCurrentDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdProof", DbType:="VarChar(MAX)")>  _
	Public Property IdProof() As String
		Get
			Return Me._IdProof
		End Get
		Set
			If (String.Equals(Me._IdProof, value) = false) Then
				Me.OnIdProofChanging(value)
				Me.SendPropertyChanging
				Me._IdProof = value
				Me.SendPropertyChanged("IdProof")
				Me.OnIdProofChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Gender", DbType:="VarChar(50)")>  _
	Public Property Gender() As String
		Get
			Return Me._Gender
		End Get
		Set
			If (String.Equals(Me._Gender, value) = false) Then
				Me.OnGenderChanging(value)
				Me.SendPropertyChanging
				Me._Gender = value
				Me.SendPropertyChanged("Gender")
				Me.OnGenderChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BloodBank")>  _
Partial Public Class BloodBank
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _BloodBankID As Integer
	
	Private _BloodGroup As String
	
	Private _Amount As System.Nullable(Of Double)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBloodBankIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnBloodBankIDChanged()
    End Sub
    Partial Private Sub OnBloodGroupChanging(value As String)
    End Sub
    Partial Private Sub OnBloodGroupChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BloodBankID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property BloodBankID() As Integer
		Get
			Return Me._BloodBankID
		End Get
		Set
			If ((Me._BloodBankID = value)  _
						= false) Then
				Me.OnBloodBankIDChanging(value)
				Me.SendPropertyChanging
				Me._BloodBankID = value
				Me.SendPropertyChanged("BloodBankID")
				Me.OnBloodBankIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BloodGroup", DbType:="VarChar(50)")>  _
	Public Property BloodGroup() As String
		Get
			Return Me._BloodGroup
		End Get
		Set
			If (String.Equals(Me._BloodGroup, value) = false) Then
				Me.OnBloodGroupChanging(value)
				Me.SendPropertyChanging
				Me._BloodGroup = value
				Me.SendPropertyChanged("BloodGroup")
				Me.OnBloodGroupChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="Float")>  _
	Public Property Amount() As System.Nullable(Of Double)
		Get
			Return Me._Amount
		End Get
		Set
			If (Me._Amount.Equals(value) = false) Then
				Me.OnAmountChanging(value)
				Me.SendPropertyChanging
				Me._Amount = value
				Me.SendPropertyChanged("Amount")
				Me.OnAmountChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BloodRequirement")>  _
Partial Public Class BloodRequirement
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _BloodRequirementID As Integer
	
	Private _Name As String
	
	Private _State As String
	
	Private _City As String
	
	Private _Address As String
	
	Private _MobileNumber As String
	
	Private _EmailID As String
	
	Private _IDproof As String
	
	Private _BloodGroup As String
	
	Private _Requirement As String
	
	Private _RequiremntDate As String
	
	Private _CurrentDate As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBloodRequirementIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnBloodRequirementIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnStateChanging(value As String)
    End Sub
    Partial Private Sub OnStateChanged()
    End Sub
    Partial Private Sub OnCityChanging(value As String)
    End Sub
    Partial Private Sub OnCityChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnMobileNumberChanging(value As String)
    End Sub
    Partial Private Sub OnMobileNumberChanged()
    End Sub
    Partial Private Sub OnEmailIDChanging(value As String)
    End Sub
    Partial Private Sub OnEmailIDChanged()
    End Sub
    Partial Private Sub OnIDproofChanging(value As String)
    End Sub
    Partial Private Sub OnIDproofChanged()
    End Sub
    Partial Private Sub OnBloodGroupChanging(value As String)
    End Sub
    Partial Private Sub OnBloodGroupChanged()
    End Sub
    Partial Private Sub OnRequirementChanging(value As String)
    End Sub
    Partial Private Sub OnRequirementChanged()
    End Sub
    Partial Private Sub OnRequiremntDateChanging(value As String)
    End Sub
    Partial Private Sub OnRequiremntDateChanged()
    End Sub
    Partial Private Sub OnCurrentDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCurrentDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BloodRequirementID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property BloodRequirementID() As Integer
		Get
			Return Me._BloodRequirementID
		End Get
		Set
			If ((Me._BloodRequirementID = value)  _
						= false) Then
				Me.OnBloodRequirementIDChanging(value)
				Me.SendPropertyChanging
				Me._BloodRequirementID = value
				Me.SendPropertyChanged("BloodRequirementID")
				Me.OnBloodRequirementIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="VarChar(50)")>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me.OnStateChanging(value)
				Me.SendPropertyChanging
				Me._State = value
				Me.SendPropertyChanged("State")
				Me.OnStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="VarChar(50)")>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me.OnCityChanging(value)
				Me.SendPropertyChanging
				Me._City = value
				Me.SendPropertyChanged("City")
				Me.OnCityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="VarChar(500)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MobileNumber", DbType:="VarChar(50)")>  _
	Public Property MobileNumber() As String
		Get
			Return Me._MobileNumber
		End Get
		Set
			If (String.Equals(Me._MobileNumber, value) = false) Then
				Me.OnMobileNumberChanging(value)
				Me.SendPropertyChanging
				Me._MobileNumber = value
				Me.SendPropertyChanged("MobileNumber")
				Me.OnMobileNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailID", DbType:="VarChar(50)")>  _
	Public Property EmailID() As String
		Get
			Return Me._EmailID
		End Get
		Set
			If (String.Equals(Me._EmailID, value) = false) Then
				Me.OnEmailIDChanging(value)
				Me.SendPropertyChanging
				Me._EmailID = value
				Me.SendPropertyChanged("EmailID")
				Me.OnEmailIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDproof", DbType:="VarChar(MAX)")>  _
	Public Property IDproof() As String
		Get
			Return Me._IDproof
		End Get
		Set
			If (String.Equals(Me._IDproof, value) = false) Then
				Me.OnIDproofChanging(value)
				Me.SendPropertyChanging
				Me._IDproof = value
				Me.SendPropertyChanged("IDproof")
				Me.OnIDproofChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BloodGroup", DbType:="VarChar(50)")>  _
	Public Property BloodGroup() As String
		Get
			Return Me._BloodGroup
		End Get
		Set
			If (String.Equals(Me._BloodGroup, value) = false) Then
				Me.OnBloodGroupChanging(value)
				Me.SendPropertyChanging
				Me._BloodGroup = value
				Me.SendPropertyChanged("BloodGroup")
				Me.OnBloodGroupChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Requirement", DbType:="VarChar(50)")>  _
	Public Property Requirement() As String
		Get
			Return Me._Requirement
		End Get
		Set
			If (String.Equals(Me._Requirement, value) = false) Then
				Me.OnRequirementChanging(value)
				Me.SendPropertyChanging
				Me._Requirement = value
				Me.SendPropertyChanged("Requirement")
				Me.OnRequirementChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequiremntDate", DbType:="VarChar(50)")>  _
	Public Property RequiremntDate() As String
		Get
			Return Me._RequiremntDate
		End Get
		Set
			If (String.Equals(Me._RequiremntDate, value) = false) Then
				Me.OnRequiremntDateChanging(value)
				Me.SendPropertyChanging
				Me._RequiremntDate = value
				Me.SendPropertyChanged("RequiremntDate")
				Me.OnRequiremntDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurrentDate", DbType:="DateTime")>  _
	Public Property CurrentDate() As System.Nullable(Of Date)
		Get
			Return Me._CurrentDate
		End Get
		Set
			If (Me._CurrentDate.Equals(value) = false) Then
				Me.OnCurrentDateChanging(value)
				Me.SendPropertyChanging
				Me._CurrentDate = value
				Me.SendPropertyChanged("CurrentDate")
				Me.OnCurrentDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CareerTable")>  _
Partial Public Class CareerTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CareerID As Integer
	
	Private _Title As String
	
	Private _Name As String
	
	Private _EmailID As String
	
	Private _MobileNo As String
	
	Private _Address As String
	
	Private _Experience As String
	
	Private _Resume As String
	
	Private _CurrentDate As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCareerIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCareerIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnEmailIDChanging(value As String)
    End Sub
    Partial Private Sub OnEmailIDChanged()
    End Sub
    Partial Private Sub OnMobileNoChanging(value As String)
    End Sub
    Partial Private Sub OnMobileNoChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnExperienceChanging(value As String)
    End Sub
    Partial Private Sub OnExperienceChanged()
    End Sub
    Partial Private Sub OnResumeChanging(value As String)
    End Sub
    Partial Private Sub OnResumeChanged()
    End Sub
    Partial Private Sub OnCurrentDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCurrentDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CareerID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CareerID() As Integer
		Get
			Return Me._CareerID
		End Get
		Set
			If ((Me._CareerID = value)  _
						= false) Then
				Me.OnCareerIDChanging(value)
				Me.SendPropertyChanging
				Me._CareerID = value
				Me.SendPropertyChanged("CareerID")
				Me.OnCareerIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="VarChar(50)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailID", DbType:="VarChar(50)")>  _
	Public Property EmailID() As String
		Get
			Return Me._EmailID
		End Get
		Set
			If (String.Equals(Me._EmailID, value) = false) Then
				Me.OnEmailIDChanging(value)
				Me.SendPropertyChanging
				Me._EmailID = value
				Me.SendPropertyChanged("EmailID")
				Me.OnEmailIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MobileNo", DbType:="VarChar(50)")>  _
	Public Property MobileNo() As String
		Get
			Return Me._MobileNo
		End Get
		Set
			If (String.Equals(Me._MobileNo, value) = false) Then
				Me.OnMobileNoChanging(value)
				Me.SendPropertyChanging
				Me._MobileNo = value
				Me.SendPropertyChanged("MobileNo")
				Me.OnMobileNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="VarChar(500)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Experience", DbType:="VarChar(50)")>  _
	Public Property Experience() As String
		Get
			Return Me._Experience
		End Get
		Set
			If (String.Equals(Me._Experience, value) = false) Then
				Me.OnExperienceChanging(value)
				Me.SendPropertyChanging
				Me._Experience = value
				Me.SendPropertyChanged("Experience")
				Me.OnExperienceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Resume", Storage:="_Resume", DbType:="VarChar(MAX)")>  _
	Public Property [Resume]() As String
		Get
			Return Me._Resume
		End Get
		Set
			If (String.Equals(Me._Resume, value) = false) Then
				Me.OnResumeChanging(value)
				Me.SendPropertyChanging
				Me._Resume = value
				Me.SendPropertyChanged("[Resume]")
				Me.OnResumeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurrentDate", DbType:="DateTime")>  _
	Public Property CurrentDate() As System.Nullable(Of Date)
		Get
			Return Me._CurrentDate
		End Get
		Set
			If (Me._CurrentDate.Equals(value) = false) Then
				Me.OnCurrentDateChanging(value)
				Me.SendPropertyChanging
				Me._CurrentDate = value
				Me.SendPropertyChanged("CurrentDate")
				Me.OnCurrentDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CityState")>  _
Partial Public Class CityState
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _City As String
	
	Private _State As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnCityChanging(value As String)
    End Sub
    Partial Private Sub OnCityChanged()
    End Sub
    Partial Private Sub OnStateChanging(value As String)
    End Sub
    Partial Private Sub OnStateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="VarChar(50)")>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me.OnCityChanging(value)
				Me.SendPropertyChanging
				Me._City = value
				Me.SendPropertyChanged("City")
				Me.OnCityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="VarChar(50)")>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me.OnStateChanging(value)
				Me.SendPropertyChanging
				Me._State = value
				Me.SendPropertyChanged("State")
				Me.OnStateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DepartmentTable")>  _
Partial Public Class DepartmentTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DepartmentID As Integer
	
	Private _DepartmentName As String
	
	Private _DepartmentImage As String
	
	Private _DepartmentDescription As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDepartmentIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDepartmentIDChanged()
    End Sub
    Partial Private Sub OnDepartmentNameChanging(value As String)
    End Sub
    Partial Private Sub OnDepartmentNameChanged()
    End Sub
    Partial Private Sub OnDepartmentImageChanging(value As String)
    End Sub
    Partial Private Sub OnDepartmentImageChanged()
    End Sub
    Partial Private Sub OnDepartmentDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDepartmentDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DepartmentID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property DepartmentID() As Integer
		Get
			Return Me._DepartmentID
		End Get
		Set
			If ((Me._DepartmentID = value)  _
						= false) Then
				Me.OnDepartmentIDChanging(value)
				Me.SendPropertyChanging
				Me._DepartmentID = value
				Me.SendPropertyChanged("DepartmentID")
				Me.OnDepartmentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DepartmentName", DbType:="VarChar(50)")>  _
	Public Property DepartmentName() As String
		Get
			Return Me._DepartmentName
		End Get
		Set
			If (String.Equals(Me._DepartmentName, value) = false) Then
				Me.OnDepartmentNameChanging(value)
				Me.SendPropertyChanging
				Me._DepartmentName = value
				Me.SendPropertyChanged("DepartmentName")
				Me.OnDepartmentNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DepartmentImage", DbType:="VarChar(MAX)")>  _
	Public Property DepartmentImage() As String
		Get
			Return Me._DepartmentImage
		End Get
		Set
			If (String.Equals(Me._DepartmentImage, value) = false) Then
				Me.OnDepartmentImageChanging(value)
				Me.SendPropertyChanging
				Me._DepartmentImage = value
				Me.SendPropertyChanged("DepartmentImage")
				Me.OnDepartmentImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DepartmentDescription", DbType:="VarChar(MAX)")>  _
	Public Property DepartmentDescription() As String
		Get
			Return Me._DepartmentDescription
		End Get
		Set
			If (String.Equals(Me._DepartmentDescription, value) = false) Then
				Me.OnDepartmentDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._DepartmentDescription = value
				Me.SendPropertyChanged("DepartmentDescription")
				Me.OnDepartmentDescriptionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DoctorTable")>  _
Partial Public Class DoctorTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DoctorID As Integer
	
	Private _DoctorName As String
	
	Private _Qualification As String
	
	Private _DepartmentID As System.Nullable(Of Integer)
	
	Private _HospitalAffiliations As String
	
	Private _EmailID As String
	
	Private _MobileNo As String
	
	Private _Image As String
	
	Private _Description As String
	
	Private _Timing As String
	
	Private _Days As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDoctorIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDoctorIDChanged()
    End Sub
    Partial Private Sub OnDoctorNameChanging(value As String)
    End Sub
    Partial Private Sub OnDoctorNameChanged()
    End Sub
    Partial Private Sub OnQualificationChanging(value As String)
    End Sub
    Partial Private Sub OnQualificationChanged()
    End Sub
    Partial Private Sub OnDepartmentIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDepartmentIDChanged()
    End Sub
    Partial Private Sub OnHospitalAffiliationsChanging(value As String)
    End Sub
    Partial Private Sub OnHospitalAffiliationsChanged()
    End Sub
    Partial Private Sub OnEmailIDChanging(value As String)
    End Sub
    Partial Private Sub OnEmailIDChanged()
    End Sub
    Partial Private Sub OnMobileNoChanging(value As String)
    End Sub
    Partial Private Sub OnMobileNoChanged()
    End Sub
    Partial Private Sub OnImageChanging(value As String)
    End Sub
    Partial Private Sub OnImageChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnTimingChanging(value As String)
    End Sub
    Partial Private Sub OnTimingChanged()
    End Sub
    Partial Private Sub OnDaysChanging(value As String)
    End Sub
    Partial Private Sub OnDaysChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DoctorID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property DoctorID() As Integer
		Get
			Return Me._DoctorID
		End Get
		Set
			If ((Me._DoctorID = value)  _
						= false) Then
				Me.OnDoctorIDChanging(value)
				Me.SendPropertyChanging
				Me._DoctorID = value
				Me.SendPropertyChanged("DoctorID")
				Me.OnDoctorIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DoctorName", DbType:="VarChar(50)")>  _
	Public Property DoctorName() As String
		Get
			Return Me._DoctorName
		End Get
		Set
			If (String.Equals(Me._DoctorName, value) = false) Then
				Me.OnDoctorNameChanging(value)
				Me.SendPropertyChanging
				Me._DoctorName = value
				Me.SendPropertyChanged("DoctorName")
				Me.OnDoctorNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Qualification", DbType:="VarChar(50)")>  _
	Public Property Qualification() As String
		Get
			Return Me._Qualification
		End Get
		Set
			If (String.Equals(Me._Qualification, value) = false) Then
				Me.OnQualificationChanging(value)
				Me.SendPropertyChanging
				Me._Qualification = value
				Me.SendPropertyChanged("Qualification")
				Me.OnQualificationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DepartmentID", DbType:="Int")>  _
	Public Property DepartmentID() As System.Nullable(Of Integer)
		Get
			Return Me._DepartmentID
		End Get
		Set
			If (Me._DepartmentID.Equals(value) = false) Then
				Me.OnDepartmentIDChanging(value)
				Me.SendPropertyChanging
				Me._DepartmentID = value
				Me.SendPropertyChanged("DepartmentID")
				Me.OnDepartmentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HospitalAffiliations", DbType:="VarChar(50)")>  _
	Public Property HospitalAffiliations() As String
		Get
			Return Me._HospitalAffiliations
		End Get
		Set
			If (String.Equals(Me._HospitalAffiliations, value) = false) Then
				Me.OnHospitalAffiliationsChanging(value)
				Me.SendPropertyChanging
				Me._HospitalAffiliations = value
				Me.SendPropertyChanged("HospitalAffiliations")
				Me.OnHospitalAffiliationsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailID", DbType:="VarChar(50)")>  _
	Public Property EmailID() As String
		Get
			Return Me._EmailID
		End Get
		Set
			If (String.Equals(Me._EmailID, value) = false) Then
				Me.OnEmailIDChanging(value)
				Me.SendPropertyChanging
				Me._EmailID = value
				Me.SendPropertyChanged("EmailID")
				Me.OnEmailIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MobileNo", DbType:="VarChar(50)")>  _
	Public Property MobileNo() As String
		Get
			Return Me._MobileNo
		End Get
		Set
			If (String.Equals(Me._MobileNo, value) = false) Then
				Me.OnMobileNoChanging(value)
				Me.SendPropertyChanging
				Me._MobileNo = value
				Me.SendPropertyChanged("MobileNo")
				Me.OnMobileNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Image", DbType:="VarChar(MAX)")>  _
	Public Property Image() As String
		Get
			Return Me._Image
		End Get
		Set
			If (String.Equals(Me._Image, value) = false) Then
				Me.OnImageChanging(value)
				Me.SendPropertyChanging
				Me._Image = value
				Me.SendPropertyChanged("Image")
				Me.OnImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Timing", DbType:="VarChar(50)")>  _
	Public Property Timing() As String
		Get
			Return Me._Timing
		End Get
		Set
			If (String.Equals(Me._Timing, value) = false) Then
				Me.OnTimingChanging(value)
				Me.SendPropertyChanging
				Me._Timing = value
				Me.SendPropertyChanged("Timing")
				Me.OnTimingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Days", DbType:="VarChar(50)")>  _
	Public Property Days() As String
		Get
			Return Me._Days
		End Get
		Set
			If (String.Equals(Me._Days, value) = false) Then
				Me.OnDaysChanging(value)
				Me.SendPropertyChanging
				Me._Days = value
				Me.SendPropertyChanged("Days")
				Me.OnDaysChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EnquiryTable")>  _
Partial Public Class EnquiryTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _EnquiryID As Integer
	
	Private _Name As String
	
	Private _EmailID As String
	
	Private _MobileNo As String
	
	Private _Address As String
	
	Private _Query As String
	
	Private _CurrentDate As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnEnquiryIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnEnquiryIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnEmailIDChanging(value As String)
    End Sub
    Partial Private Sub OnEmailIDChanged()
    End Sub
    Partial Private Sub OnMobileNoChanging(value As String)
    End Sub
    Partial Private Sub OnMobileNoChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnQueryChanging(value As String)
    End Sub
    Partial Private Sub OnQueryChanged()
    End Sub
    Partial Private Sub OnCurrentDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCurrentDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EnquiryID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property EnquiryID() As Integer
		Get
			Return Me._EnquiryID
		End Get
		Set
			If ((Me._EnquiryID = value)  _
						= false) Then
				Me.OnEnquiryIDChanging(value)
				Me.SendPropertyChanging
				Me._EnquiryID = value
				Me.SendPropertyChanged("EnquiryID")
				Me.OnEnquiryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailID", DbType:="VarChar(50)")>  _
	Public Property EmailID() As String
		Get
			Return Me._EmailID
		End Get
		Set
			If (String.Equals(Me._EmailID, value) = false) Then
				Me.OnEmailIDChanging(value)
				Me.SendPropertyChanging
				Me._EmailID = value
				Me.SendPropertyChanged("EmailID")
				Me.OnEmailIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MobileNo", DbType:="VarChar(50)")>  _
	Public Property MobileNo() As String
		Get
			Return Me._MobileNo
		End Get
		Set
			If (String.Equals(Me._MobileNo, value) = false) Then
				Me.OnMobileNoChanging(value)
				Me.SendPropertyChanging
				Me._MobileNo = value
				Me.SendPropertyChanged("MobileNo")
				Me.OnMobileNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="VarChar(500)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Query", DbType:="VarChar(MAX)")>  _
	Public Property Query() As String
		Get
			Return Me._Query
		End Get
		Set
			If (String.Equals(Me._Query, value) = false) Then
				Me.OnQueryChanging(value)
				Me.SendPropertyChanging
				Me._Query = value
				Me.SendPropertyChanged("Query")
				Me.OnQueryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurrentDate", DbType:="DateTime")>  _
	Public Property CurrentDate() As System.Nullable(Of Date)
		Get
			Return Me._CurrentDate
		End Get
		Set
			If (Me._CurrentDate.Equals(value) = false) Then
				Me.OnCurrentDateChanging(value)
				Me.SendPropertyChanging
				Me._CurrentDate = value
				Me.SendPropertyChanged("CurrentDate")
				Me.OnCurrentDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FeedbackTable")>  _
Partial Public Class FeedbackTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _FeedbackID As Integer
	
	Private _Title As String
	
	Private _Name As String
	
	Private _State As String
	
	Private _City As String
	
	Private _Address As String
	
	Private _EmailID As String
	
	Private _MobileNo As String
	
	Private _FeedbackType As String
	
	Private _Comment As String
	
	Private _CurrentDate As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFeedbackIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnFeedbackIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnStateChanging(value As String)
    End Sub
    Partial Private Sub OnStateChanged()
    End Sub
    Partial Private Sub OnCityChanging(value As String)
    End Sub
    Partial Private Sub OnCityChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnEmailIDChanging(value As String)
    End Sub
    Partial Private Sub OnEmailIDChanged()
    End Sub
    Partial Private Sub OnMobileNoChanging(value As String)
    End Sub
    Partial Private Sub OnMobileNoChanged()
    End Sub
    Partial Private Sub OnFeedbackTypeChanging(value As String)
    End Sub
    Partial Private Sub OnFeedbackTypeChanged()
    End Sub
    Partial Private Sub OnCommentChanging(value As String)
    End Sub
    Partial Private Sub OnCommentChanged()
    End Sub
    Partial Private Sub OnCurrentDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCurrentDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FeedbackID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property FeedbackID() As Integer
		Get
			Return Me._FeedbackID
		End Get
		Set
			If ((Me._FeedbackID = value)  _
						= false) Then
				Me.OnFeedbackIDChanging(value)
				Me.SendPropertyChanging
				Me._FeedbackID = value
				Me.SendPropertyChanged("FeedbackID")
				Me.OnFeedbackIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="VarChar(50)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="VarChar(50)")>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me.OnStateChanging(value)
				Me.SendPropertyChanging
				Me._State = value
				Me.SendPropertyChanged("State")
				Me.OnStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="VarChar(50)")>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me.OnCityChanging(value)
				Me.SendPropertyChanging
				Me._City = value
				Me.SendPropertyChanged("City")
				Me.OnCityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="VarChar(50)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailID", DbType:="VarChar(50)")>  _
	Public Property EmailID() As String
		Get
			Return Me._EmailID
		End Get
		Set
			If (String.Equals(Me._EmailID, value) = false) Then
				Me.OnEmailIDChanging(value)
				Me.SendPropertyChanging
				Me._EmailID = value
				Me.SendPropertyChanged("EmailID")
				Me.OnEmailIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MobileNo", DbType:="VarChar(50)")>  _
	Public Property MobileNo() As String
		Get
			Return Me._MobileNo
		End Get
		Set
			If (String.Equals(Me._MobileNo, value) = false) Then
				Me.OnMobileNoChanging(value)
				Me.SendPropertyChanging
				Me._MobileNo = value
				Me.SendPropertyChanged("MobileNo")
				Me.OnMobileNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FeedbackType", DbType:="VarChar(50)")>  _
	Public Property FeedbackType() As String
		Get
			Return Me._FeedbackType
		End Get
		Set
			If (String.Equals(Me._FeedbackType, value) = false) Then
				Me.OnFeedbackTypeChanging(value)
				Me.SendPropertyChanging
				Me._FeedbackType = value
				Me.SendPropertyChanged("FeedbackType")
				Me.OnFeedbackTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Comment", DbType:="VarChar(MAX)")>  _
	Public Property Comment() As String
		Get
			Return Me._Comment
		End Get
		Set
			If (String.Equals(Me._Comment, value) = false) Then
				Me.OnCommentChanging(value)
				Me.SendPropertyChanging
				Me._Comment = value
				Me.SendPropertyChanged("Comment")
				Me.OnCommentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurrentDate", DbType:="DateTime")>  _
	Public Property CurrentDate() As System.Nullable(Of Date)
		Get
			Return Me._CurrentDate
		End Get
		Set
			If (Me._CurrentDate.Equals(value) = false) Then
				Me.OnCurrentDateChanging(value)
				Me.SendPropertyChanging
				Me._CurrentDate = value
				Me.SendPropertyChanged("CurrentDate")
				Me.OnCurrentDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PackageTable")>  _
Partial Public Class PackageTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PackageID As Integer
	
	Private _PackageName As String
	
	Private _Image As String
	
	Private _Item1 As String
	
	Private _Item2 As String
	
	Private _Item3 As String
	
	Private _Item4 As String
	
	Private _Item5 As String
	
	Private _Item6 As String
	
	Private _Item7 As String
	
	Private _Item8 As String
	
	Private _Cost As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPackageIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPackageIDChanged()
    End Sub
    Partial Private Sub OnPackageNameChanging(value As String)
    End Sub
    Partial Private Sub OnPackageNameChanged()
    End Sub
    Partial Private Sub OnImageChanging(value As String)
    End Sub
    Partial Private Sub OnImageChanged()
    End Sub
    Partial Private Sub OnItem1Changing(value As String)
    End Sub
    Partial Private Sub OnItem1Changed()
    End Sub
    Partial Private Sub OnItem2Changing(value As String)
    End Sub
    Partial Private Sub OnItem2Changed()
    End Sub
    Partial Private Sub OnItem3Changing(value As String)
    End Sub
    Partial Private Sub OnItem3Changed()
    End Sub
    Partial Private Sub OnItem4Changing(value As String)
    End Sub
    Partial Private Sub OnItem4Changed()
    End Sub
    Partial Private Sub OnItem5Changing(value As String)
    End Sub
    Partial Private Sub OnItem5Changed()
    End Sub
    Partial Private Sub OnItem6Changing(value As String)
    End Sub
    Partial Private Sub OnItem6Changed()
    End Sub
    Partial Private Sub OnItem7Changing(value As String)
    End Sub
    Partial Private Sub OnItem7Changed()
    End Sub
    Partial Private Sub OnItem8Changing(value As String)
    End Sub
    Partial Private Sub OnItem8Changed()
    End Sub
    Partial Private Sub OnCostChanging(value As String)
    End Sub
    Partial Private Sub OnCostChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PackageID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property PackageID() As Integer
		Get
			Return Me._PackageID
		End Get
		Set
			If ((Me._PackageID = value)  _
						= false) Then
				Me.OnPackageIDChanging(value)
				Me.SendPropertyChanging
				Me._PackageID = value
				Me.SendPropertyChanged("PackageID")
				Me.OnPackageIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PackageName", DbType:="VarChar(50)")>  _
	Public Property PackageName() As String
		Get
			Return Me._PackageName
		End Get
		Set
			If (String.Equals(Me._PackageName, value) = false) Then
				Me.OnPackageNameChanging(value)
				Me.SendPropertyChanging
				Me._PackageName = value
				Me.SendPropertyChanged("PackageName")
				Me.OnPackageNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Image", DbType:="VarChar(MAX)")>  _
	Public Property Image() As String
		Get
			Return Me._Image
		End Get
		Set
			If (String.Equals(Me._Image, value) = false) Then
				Me.OnImageChanging(value)
				Me.SendPropertyChanging
				Me._Image = value
				Me.SendPropertyChanged("Image")
				Me.OnImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Item1", DbType:="VarChar(50)")>  _
	Public Property Item1() As String
		Get
			Return Me._Item1
		End Get
		Set
			If (String.Equals(Me._Item1, value) = false) Then
				Me.OnItem1Changing(value)
				Me.SendPropertyChanging
				Me._Item1 = value
				Me.SendPropertyChanged("Item1")
				Me.OnItem1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Item2", DbType:="VarChar(50)")>  _
	Public Property Item2() As String
		Get
			Return Me._Item2
		End Get
		Set
			If (String.Equals(Me._Item2, value) = false) Then
				Me.OnItem2Changing(value)
				Me.SendPropertyChanging
				Me._Item2 = value
				Me.SendPropertyChanged("Item2")
				Me.OnItem2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Item3", DbType:="VarChar(50)")>  _
	Public Property Item3() As String
		Get
			Return Me._Item3
		End Get
		Set
			If (String.Equals(Me._Item3, value) = false) Then
				Me.OnItem3Changing(value)
				Me.SendPropertyChanging
				Me._Item3 = value
				Me.SendPropertyChanged("Item3")
				Me.OnItem3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Item4", DbType:="VarChar(50)")>  _
	Public Property Item4() As String
		Get
			Return Me._Item4
		End Get
		Set
			If (String.Equals(Me._Item4, value) = false) Then
				Me.OnItem4Changing(value)
				Me.SendPropertyChanging
				Me._Item4 = value
				Me.SendPropertyChanged("Item4")
				Me.OnItem4Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Item5", DbType:="VarChar(50)")>  _
	Public Property Item5() As String
		Get
			Return Me._Item5
		End Get
		Set
			If (String.Equals(Me._Item5, value) = false) Then
				Me.OnItem5Changing(value)
				Me.SendPropertyChanging
				Me._Item5 = value
				Me.SendPropertyChanged("Item5")
				Me.OnItem5Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Item6", DbType:="VarChar(50)")>  _
	Public Property Item6() As String
		Get
			Return Me._Item6
		End Get
		Set
			If (String.Equals(Me._Item6, value) = false) Then
				Me.OnItem6Changing(value)
				Me.SendPropertyChanging
				Me._Item6 = value
				Me.SendPropertyChanged("Item6")
				Me.OnItem6Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Item7", DbType:="VarChar(50)")>  _
	Public Property Item7() As String
		Get
			Return Me._Item7
		End Get
		Set
			If (String.Equals(Me._Item7, value) = false) Then
				Me.OnItem7Changing(value)
				Me.SendPropertyChanging
				Me._Item7 = value
				Me.SendPropertyChanged("Item7")
				Me.OnItem7Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Item8", DbType:="VarChar(50)")>  _
	Public Property Item8() As String
		Get
			Return Me._Item8
		End Get
		Set
			If (String.Equals(Me._Item8, value) = false) Then
				Me.OnItem8Changing(value)
				Me.SendPropertyChanging
				Me._Item8 = value
				Me.SendPropertyChanged("Item8")
				Me.OnItem8Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cost", DbType:="VarChar(50)")>  _
	Public Property Cost() As String
		Get
			Return Me._Cost
		End Get
		Set
			If (String.Equals(Me._Cost, value) = false) Then
				Me.OnCostChanging(value)
				Me.SendPropertyChanging
				Me._Cost = value
				Me.SendPropertyChanged("Cost")
				Me.OnCostChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.RegisterPackage")>  _
Partial Public Class RegisterPackage
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _RegisterID As Integer
	
	Private _PackageName As String
	
	Private _Name As String
	
	Private _Gender As String
	
	Private _Age As String
	
	Private _EmailID As String
	
	Private _MobileNo As String
	
	Private _Date As String
	
	Private _Address As String
	
	Private _CurrentDate As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRegisterIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnRegisterIDChanged()
    End Sub
    Partial Private Sub OnPackageNameChanging(value As String)
    End Sub
    Partial Private Sub OnPackageNameChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnGenderChanging(value As String)
    End Sub
    Partial Private Sub OnGenderChanged()
    End Sub
    Partial Private Sub OnAgeChanging(value As String)
    End Sub
    Partial Private Sub OnAgeChanged()
    End Sub
    Partial Private Sub OnEmailIDChanging(value As String)
    End Sub
    Partial Private Sub OnEmailIDChanged()
    End Sub
    Partial Private Sub OnMobileNoChanging(value As String)
    End Sub
    Partial Private Sub OnMobileNoChanged()
    End Sub
    Partial Private Sub OnDateChanging(value As String)
    End Sub
    Partial Private Sub OnDateChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnCurrentDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCurrentDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegisterID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property RegisterID() As Integer
		Get
			Return Me._RegisterID
		End Get
		Set
			If ((Me._RegisterID = value)  _
						= false) Then
				Me.OnRegisterIDChanging(value)
				Me.SendPropertyChanging
				Me._RegisterID = value
				Me.SendPropertyChanged("RegisterID")
				Me.OnRegisterIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PackageName", DbType:="VarChar(50)")>  _
	Public Property PackageName() As String
		Get
			Return Me._PackageName
		End Get
		Set
			If (String.Equals(Me._PackageName, value) = false) Then
				Me.OnPackageNameChanging(value)
				Me.SendPropertyChanging
				Me._PackageName = value
				Me.SendPropertyChanged("PackageName")
				Me.OnPackageNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Gender", DbType:="VarChar(50)")>  _
	Public Property Gender() As String
		Get
			Return Me._Gender
		End Get
		Set
			If (String.Equals(Me._Gender, value) = false) Then
				Me.OnGenderChanging(value)
				Me.SendPropertyChanging
				Me._Gender = value
				Me.SendPropertyChanged("Gender")
				Me.OnGenderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Age", DbType:="VarChar(50)")>  _
	Public Property Age() As String
		Get
			Return Me._Age
		End Get
		Set
			If (String.Equals(Me._Age, value) = false) Then
				Me.OnAgeChanging(value)
				Me.SendPropertyChanging
				Me._Age = value
				Me.SendPropertyChanged("Age")
				Me.OnAgeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailID", DbType:="VarChar(50)")>  _
	Public Property EmailID() As String
		Get
			Return Me._EmailID
		End Get
		Set
			If (String.Equals(Me._EmailID, value) = false) Then
				Me.OnEmailIDChanging(value)
				Me.SendPropertyChanging
				Me._EmailID = value
				Me.SendPropertyChanged("EmailID")
				Me.OnEmailIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MobileNo", DbType:="VarChar(50)")>  _
	Public Property MobileNo() As String
		Get
			Return Me._MobileNo
		End Get
		Set
			If (String.Equals(Me._MobileNo, value) = false) Then
				Me.OnMobileNoChanging(value)
				Me.SendPropertyChanging
				Me._MobileNo = value
				Me.SendPropertyChanged("MobileNo")
				Me.OnMobileNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Date", Storage:="_Date", DbType:="VarChar(50)")>  _
	Public Property [Date]() As String
		Get
			Return Me._Date
		End Get
		Set
			If (String.Equals(Me._Date, value) = false) Then
				Me.OnDateChanging(value)
				Me.SendPropertyChanging
				Me._Date = value
				Me.SendPropertyChanged("[Date]")
				Me.OnDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="VarChar(500)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurrentDate", DbType:="DateTime")>  _
	Public Property CurrentDate() As System.Nullable(Of Date)
		Get
			Return Me._CurrentDate
		End Get
		Set
			If (Me._CurrentDate.Equals(value) = false) Then
				Me.OnCurrentDateChanging(value)
				Me.SendPropertyChanging
				Me._CurrentDate = value
				Me.SendPropertyChanged("CurrentDate")
				Me.OnCurrentDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
